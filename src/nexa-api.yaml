openapi: 3.0.3
info:
  title: AudioVideo Server API
  description: A RESTful API to control TV broadcast audio video servers
  contact:
    name: Pynch
    url: https://pynch.tv
    email: info@pynch.tv
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
  version: 1.0.0
servers:
- url: "{protocol}://{host}:{port}{path}"
  variables:
    protocol:
      default: http
      enum:
      - http
      - https
    host:
      default: localhost
    port:
      default: "8080"
    path:
      default: /v1
security:
- basicAuth: []
- bearerAuth: []
- apiKeyAuth: []
- openID: []
- oAuth2: []
paths:
  /:
    get:
      tags:
      - Capabilities
      summary: landing page
      description: "The landing page provides links to the API definition (in Link\
        \ Header), and other resources in the API."
      operationId: getLandingPage
      parameters:
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: The landing page provides links to the API definition and the
            Feature servers (path `/servers`).
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/landingPage'
            text/html:
              schema:
                $ref: '#/components/schemas/htmlSchema'
        "400":
          description: Bad request
        "500":
          description: Server error
      security:
      - basicAuth: []
    head:
      tags:
      - Capabilities
      summary: Check if the server is alive and responding
      description: "To see if the server is alive, using least resources (fastest\
        \ return)"
      responses:
        "204":
          description: a 204 response indicates the server is alive.
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
  /openapi:
    get:
      tags:
      - Capabilities
      summary: json encoding of this API definition
      operationId: getOpenAPI
      parameters:
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - yaml
          - html
      responses:
        "200":
          description: API definition
          content:
            application/openapi+json;version=3.0:
              schema:
                type: string
            application/openapi+yaml;version=3.0:
              schema:
                type: string
            text/html:
              schema:
                $ref: '#/components/schemas/htmlSchema'
      security:
      - basicAuth: []
  /codelists:
    get:
      tags:
      - Discover and fetch codelists
      summary: Lhe list of available codelists
      description: This operation fetches the list of codelists that are used in this
        API. For each codelist the id and a link to the codelist is provided.
      operationId: getCodelists
      parameters:
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: Array of Links with subscribe uris
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/codelists'
            text/html:
              schema:
                type: string
      security:
      - basicAuth: []
  /codelists/{codelistId}:
    get:
      tags:
      - Discover and fetch codelists
      summary: "fetch the codelist `{codelistId}`"
      description: |-
        Fetches the codelist with identifier `codelistId`. The set of available codelists can be retrieved at `/codelists`.

        _Maturity: `PRELIMINARY` (the operation may change in this API)_
      operationId: getCodelist
      parameters:
      - name: codelistId
        in: path
        description: The name of the codelist
        required: true
        style: simple
        explode: false
        schema:
          pattern: "[^/]+"
          type: string
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: The operation was executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/codelists'
            text/html:
              schema:
                $ref: '#/components/schemas/htmlSchema'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
        "500":
          description: Server Error
  /events:
    get:
      tags:
      - Events
      summary: Links to the various events offered by this service
      operationId: getEvents
      parameters:
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: Array of Links with subscribe uris
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
            text/html:
              schema:
                type: string
      security:
      - basicAuth: []
  /subscribe:
    get:
      tags:
      - Events
      summary: Subscribe to all events offered by this service
      operationId: getSubscribe
      parameters:
      - name: Connection
        in: header
        description: Part of the websocket upgrade protocol
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: upgrade
      responses:
        "200":
          description: API definition
          content:
            application/vnd.oai.openapi+json;version=3.0:
              schema:
                type: string
      security:
      - basicAuth: []
  /servers:
    get:
      tags:
      - Discover data collections
      summary: servers in the network
      operationId: getServers
      parameters:
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            The media servers shared by this API.

            The dataset is organized as one or more media servers. This resource
            provides information about and access to the servers.

            The response contains the list of servers. For each collection, a link
            to the items in the collection (path `/servers/{serverId}/items`,
            link relation `items`) as well as key information about the collection.
            This information includes:

            * A local identifier for the collection that is unique for the dataset;
            * An optional title and description for the collection;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'clip').
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servers'
              example:
                links:
                - href: http://data.example.org/servers.json
                  rel: self
                  type: application/json
                  title: this document
                - href: http://data.example.org/servers.html
                  rel: alternate
                  type: text/html
                  title: this document as HTML
                servers:
                - id: 123456
                  title: clips
                  description: Video clips of cudly animals.
                  links:
                  - href: http://data.example.org/servers/123456/clips
                    rel: items
                    type: application/json
                    title: clips
                  - href: http://data.example.org/servers/123456/clips.html
                    rel: items
                    type: text/html
                    title: clips
                  - href: https://creativecommons.org/publicdomain/zero/1.0/
                    rel: license
                    type: text/html
                    title: CC0-1.0
                  - href: https://creativecommons.org/publicdomain/zero/1.0/rdf
                    rel: license
                    type: application/rdf+xml
                    title: CC0-1.0
            text/html:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}:
    get:
      tags:
      - Server
      summary: describe the collection with id `serverId`
      operationId: getServer
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            Information about the server with id `serverId`.

            The response contains a linkto the items in the collection
            (path `/servers/{serverId}/items`,link relation `items`)
            as well as key information about the collection. This information
            includes:

            * A local identifier for the collection that is unique for the dataset;
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server'
            text/html:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}/identify:
    get:
      tags:
      - Server
      summary: Identify the server amongst many servers
      description: Server blinks a light or beeps to distinguish itself from the many
        surrounding machines.
      operationId: getServerIdentify
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: No response
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}/ping:
    get:
      tags:
      - Server
      summary: Ping the server
      description: Ping the machine.
      operationId: getServerPing
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}/sortables:
    get:
      tags:
      - Server
      summary: Retrieve the sortables of the server
      description: |-
        The sortables resources identifies the properties that can bereferenced in the 'sortby' parameter to order the features of the collection in the response to a query. The response is returned as a JSON Schema document that describes a single JSON object where each property is a sortable.

        Note that the sortables schema does not specify a schema of any object that can be retrieved from the API.
        JSON Schema is used for the sortables to have a consistent approach for describing schema information and JSON Schema is/will be used in other parts to describe schemas for GeoJSON feature content including in OpenAPI documents.
      operationId: getServerSortables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/schema:
    get:
      tags:
      - Server
      summary: Retrieve the schema of features in the feature collection
      description: Schema of the server.
      operationId: getServerSchema
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/queryables:
    get:
      tags:
      - Server
      summary: Retrieve the queryables of the server
      description: |-
        The Queryables resources identifies the properties that can be referenced in filter expressions to select specific features that meet the criteria identified in the filter. The response is a JSON Schema document that describes a single JSON object where each property is a queryable.

        Note: The queryables schema does not specify a schema of any object that can be retrieved from the API.

        The descriptive metadata (title and description of the property) as well as the schema information (data type and constraints like a list of allowed values or minimum/maxmimum values are provided to support clients to constructmeaningful queries for the data..
      operationId: getServerQueryables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/reboot:
    get:
      tags:
      - Server
      summary: Reboot the server
      description: Reboot the machine.
      operationId: getServerReboot
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}/outputs:
    get:
      tags:
      - Discover data collections
      summary: collection 'programs'
      description: |-
        Fetch programs of the collection with id `serverId`.

        Every program in a dataset belongs to a collection. A dataset may
        consist of servers. A  collection consists of Programs, Recorders, Clips and Playlists.

        Use content negotiation to request HTML or JSON.
      operationId: getServerOutputs
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      - name: limit
        in: query
        description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        required: false
        style: form
        explode: false
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 10
      - name: offset
        in: query
        description: The optional offset parameter ...
        required: false
        style: form
        explode: false
        schema:
          minimum: 1
          type: integer
          default: 0
      - name: filter
        in: query
        description: |-
          The optional filter parameter ~~~.

          ~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: orderby
        in: query
        description: |-
          The optional orderby parameter ~~~.

          ~~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            The response is a document consisting of programs in the collection.
            The programs included in the response are determined by the server
            based on the query parameters of the request. To support access to
            larger servers without overloading the client, the API supports
            paged access with links to the next page, if more resources are selected
            that the page size.

            The `limit` parameter may be used to control the subset of the
            selected resources that should be returned in the response, the page size.
            Each page may include information about the number of selected and
            returned programs (`numberMatched` and `numberReturned`) as well as
            links to support paging (link relation `next`).
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/output'
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
    patch:
      tags:
      - Output
      summary: Patch all output at once
      operationId: patchServerOutputs
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}:
    get:
      tags:
      - Output
      summary: fetch a single output
      description: |-
        Fetch the output with id `outputId` in the programs collection with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: getServerOutput
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            fetch the output with id `outputId` in the feature collection
            with id `serverId`
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security: []
    options:
      tags:
      - Output
      operationId: optionsServerOutput
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
    patch:
      tags:
      - Output
      summary: Changes attributes of the Ouput (play and stop clips by changing the
        status)
      operationId: patchServerOutput
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      requestBody:
        description: attributes to be altered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outputs_outputId_body'
        required: true
      responses:
        "204":
          description: altered
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
  /servers/{serverId}/inputs:
    get:
      tags:
      - Discover data collections
      summary: collection 'recorders'
      description: |-
        Fetch recorders of the collection with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: getServerInputs
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      - name: limit
        in: query
        description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        required: false
        style: form
        explode: false
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 10
      - name: offset
        in: query
        description: The optional offset parameter ...
        required: false
        style: form
        explode: false
        schema:
          minimum: 1
          type: integer
          default: 0
      - name: filter
        in: query
        description: |-
          The optional filter parameter ~~~.

          ~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: orderby
        in: query
        description: |-
          The optional orderby parameter ~~~.

          ~~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            The response is a document consisting of recorders in the collection.
            The recorders included in the response are determined by the server based on the query parameters of the request. To support access to larger servers without overloading the client, the API supports paged access with links to the next page, if more recorders are selected that the page size.

            The `limit` parameter may be used to control the subset of the
            selected recorders that should be returned in the response, the page size.
            Each page may include information about the number of selected and returned recorders (`numberMatched` and `numberReturned`) as well as links to support paging (link relation `next`).
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/input'
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
    patch:
      tags:
      - Input
      summary: Patch all inputs at once
      operationId: patchServerInputs
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
  /servers/{serverId}/inputs/{inputId}:
    get:
      tags:
      - Input
      summary: fetch a single input
      description: |-
        Fetch the output with id `outputId` in the feature collection
        with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: getServerInput
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: inputId
        in: path
        description: local identifier of an input
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: REC1
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            fetch the feature with id `recorderId` in the feature collection
            with id `serverId`
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/input'
            text/html:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
  /servers/{serverId}/clips:
    get:
      tags:
      - Discover data collections
      summary: collection 'clips'
      description: |-
        Fetch clips of the collection with id `serverId`.

        Every clip in a dataset belongs to a collection. A dataset may
        consist of multiple clip servers.

        Use content negotiation to request HTML or JSON.
      operationId: getServerClips
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      - name: limit
        in: query
        description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        required: false
        style: form
        explode: false
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 10
      - name: offset
        in: query
        description: The optional offset parameter ...
        required: false
        style: form
        explode: false
        schema:
          minimum: 1
          type: integer
          default: 0
      - name: filter
        in: query
        description: |-
          The optional filter parameter ~~~.

          ~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: orderby
        in: query
        description: |-
          The optional orderby parameter ~~~.

          ~~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            The response is a document consisting of clips in the collection.
            The clips included in the response are determined by the server
            based on the query parameters of the request. To support access to larger servers without overloading the client, the API supports paged access with links to the next page, if more clips are selected that the page size.

            The `limit` parameter may be used to control the subset of the
            selected clips that should be returned in the response, the page size.
            Each page may include information about the number of selected and returned clips (`numberMatched` and `numberReturned`) as well as links to support paging (link relation `next`).
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
    post:
      tags:
      - Clip
      summary: Upload a clip to the server
      description: "Upload a clip to the server. When successfull, an event with clip\
        \ details will be emitted."
      operationId: postServerClips
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: prefer
        in: header
        description: "The 'respond-async' HTTP preference indicates that the client\
          \ prefers a faster, asynchronous response to a request, rather than potentially\
          \ waiting a long time for a response."
        required: false
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/serverId_clips_body'
      responses:
        "201":
          description: Media uploaded
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
            Location:
              description: path to the newly created video
              required: true
              style: simple
              explode: false
              schema:
                type: string
                format: url
                example: $reference server URL here$
    delete:
      tags:
      - Clip
      summary: Delete all clips from the machine.
      description: Delete all clips from the machine.
      operationId: deleteServerClips
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: No response
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
  /servers/{serverId}/clips/{clipId}/queryables:
    get:
      tags:
      - Clip
      summary: Retrieve the queryables of the clip
      description: |-
        The Queryables resources identifies the properties that can be referenced in filter expressions to select specific features that meet the criteria identified in the filter. The response is a JSON Schema document that describes a single JSON object where each property is a queryable.

        Note: The queryables schema does not specify a schema of any object that can be retrieved from the API.

        The descriptive metadata (title and description of the property) as well as the schema information (data type and constraints like a list of allowed values or minimum/maxmimum values are provided to support clients to constructmeaningful queries for the data..
      operationId: getServerClipsQueryables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/clips/{clipId}/sortables:
    get:
      tags:
      - Clip
      summary: Retrieve the sortables of the clip
      description: |-
        The sortables resources identifies the properties that can bereferenced in the 'sortby' parameter to order the features of the collection in the response to a query. The response is returned as a JSON Schema document that describes a single JSON object where each property is a sortable.

        Note that the sortables schema does not specify a schema of any object that can be retrieved from the API.
        JSON Schema is used for the sortables to have a consistent approach for describing schema information and JSON Schema is/will be used in other parts to describe schemas for GeoJSON feature content including in OpenAPI documents.
      operationId: getServerClipsSortables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/clips/{clipId}/schema:
    get:
      tags:
      - Clip
      summary: Retrieve the schema of clip
      description: Schema of the clip.
      operationId: getServerClipsSchema
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/schema:
    get:
      tags:
      - Output
      summary: Retrieve the schema of clip
      description: Schema of the clip.
      operationId: getServerOutputSchema
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/onscreendisplay:
    get:
      tags:
      - OnScreenDisplay
      summary: get onscreendisplay
      operationId: getOnScreenDisplay
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
    put:
      tags:
      - OnScreenDisplay
      summary: put onscreendisplay
      operationId: putOnScreenDisplay
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/onscreendisplay/lines:
    get:
      tags:
      - OnScreenDisplay
      summary: Retrieve the schema of clip
      operationId: getOnScreenDisplayLines
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
    put:
      tags:
      - OnScreenDisplay
      summary: Retrieve the schema of clip
      operationId: putOnScreenDisplayLines
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/onscreendisplay/lines/{lineNr}:
    get:
      tags:
      - OnScreenDisplay
      summary: Get a line on the the OnScreenDisplay
      operationId: getOnScreenDisplayLine
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      - name: lineNr
        in: path
        description: line number for OnScreenDisplay
        required: true
        style: simple
        explode: false
        schema:
          type: number
        example: 1
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
    put:
      tags:
      - OnScreenDisplay
      summary: Set a line on the the OnScreenDisplay
      operationId: putOnScreenDisplayLine
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      - name: lineNr
        in: path
        description: line number for OnScreenDisplay
        required: true
        style: simple
        explode: false
        schema:
          type: number
        example: 1
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/queryables:
    get:
      tags:
      - Output
      summary: Retrieve the queryables of the output
      description: |-
        The Queryables resources identifies the properties that can be referenced in filter expressions to select specific features that meet the criteria identified in the filter. The response is a JSON Schema document that describes a single JSON object where each property is a queryable.

        Note: The queryables schema does not specify a schema of any object that can be retrieved from the API.

        The descriptive metadata (title and description of the property) as well as the schema information (data type and constraints like a list of allowed values or minimum/maxmimum values are provided to support clients to constructmeaningful queries for the data..
      operationId: getServerOutputQueryables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/outputs/{outputId}/sortables:
    get:
      tags:
      - Output
      summary: Retrieve the sortables of the output
      description: |-
        The sortables resources identifies the properties that can bereferenced in the 'sortby' parameter to order the features of the collection in the response to a query. The response is returned as a JSON Schema document that describes a single JSON object where each property is a sortable.

        Note that the sortables schema does not specify a schema of any object that can be retrieved from the API.
        JSON Schema is used for the sortables to have a consistent approach for describing schema information and JSON Schema is/will be used in other parts to describe schemas for GeoJSON feature content including in OpenAPI documents.
      operationId: getServerOutputSortables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: outputId
        in: path
        description: local identifier of an output
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: PGM2
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/inputs/{inputId}/schema:
    get:
      tags:
      - Input
      summary: Retrieve the schema of input
      description: Schema of the input.
      operationId: getServerInputSchema
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: inputId
        in: path
        description: local identifier of an input
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: REC1
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/inputs/{inputId}/queryables:
    get:
      tags:
      - Input
      summary: Retrieve the queryables of the input
      description: |-
        The Queryables resources identifies the properties that can be referenced in filter expressions to select specific features that meet the criteria identified in the filter. The response is a JSON Schema document that describes a single JSON object where each property is a queryable.

        Note: The queryables schema does not specify a schema of any object that can be retrieved from the API.

        The descriptive metadata (title and description of the property) as well as the schema information (data type and constraints like a list of allowed values or minimum/maxmimum values are provided to support clients to constructmeaningful queries for the data..
      operationId: getServerInputQueryables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: inputId
        in: path
        description: local identifier of an input
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: REC1
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/inputs/{inputId}/sortables:
    get:
      tags:
      - Input
      summary: Retrieve the sortables of the input
      description: |-
        The sortables resources identifies the properties that can bereferenced in the 'sortby' parameter to order the features of the collection in the response to a query. The response is returned as a JSON Schema document that describes a single JSON object where each property is a sortable.

        Note that the sortables schema does not specify a schema of any object that can be retrieved from the API.
        JSON Schema is used for the sortables to have a consistent approach for describing schema information and JSON Schema is/will be used in other parts to describe schemas for GeoJSON feature content including in OpenAPI documents.
      operationId: getServerInputSortables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: inputId
        in: path
        description: local identifier of an input
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: REC1
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/playlists/{playlistId}/schema:
    get:
      tags:
      - Playlist
      summary: Retrieve the schema of playlist
      description: Schema of the playlist.
      operationId: getServerPlaylistSchema
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json;schema="https://json-schema.org/draft/2020-12/schema":
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/playlists/{playlistId}/queryables:
    get:
      tags:
      - Playlist
      summary: Retrieve the queryables of the playlist
      description: |-
        The Queryables resources identifies the properties that can be referenced in filter expressions to select specific features that meet the criteria identified in the filter. The response is a JSON Schema document that describes a single JSON object where each property is a queryable.

        Note: The queryables schema does not specify a schema of any object that can be retrieved from the API.

        The descriptive metadata (title and description of the property) as well as the schema information (data type and constraints like a list of allowed values or minimum/maxmimum values are provided to support clients to constructmeaningful queries for the data..
      operationId: getServerPlaylistQueryables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/playlists/{playlistId}/sortables:
    get:
      tags:
      - Playlist
      summary: Retrieve the sortables of the input
      description: |-
        The sortables resources identifies the properties that can bereferenced in the 'sortby' parameter to order the features of the collection in the response to a query. The response is returned as a JSON Schema document that describes a single JSON object where each property is a sortable.

        Note that the sortables schema does not specify a schema of any object that can be retrieved from the API.
        JSON Schema is used for the sortables to have a consistent approach for describing schema information and JSON Schema is/will be used in other parts to describe schemas for GeoJSON feature content including in OpenAPI documents.
      operationId: getServerPlaylistSortables
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        "404":
          description: Not Found
      security:
      - basicAuth: []
  /servers/{serverId}/clips/{clipId}:
    get:
      tags:
      - Clip
      summary: fetch a single clip
      description: |-
        Fetch the feature with id `featureId` in the feature collection
        with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: getServerClip
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            fetch the feature with id `featureId` in the feature collection
            with id `serverId`
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clip'
            text/html:
              schema:
                type: string
            media/mp4:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security: []
    delete:
      tags:
      - Clip
      summary: remove clip from server
      operationId: deleteServerClip
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      responses:
        "202":
          description: clip removed
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
    options:
      tags:
      - Clip
      operationId: optionsServerClip
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
    patch:
      tags:
      - Clip
      summary: Modify the attributes of an existing clip
      description: Modify the attributes of an existing clip.
      operationId: patchServerClip
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: clipId
        in: path
        description: local identifier of a clip
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 000117A
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clips_clipId_body'
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "204":
          description: No Content
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
  /servers/{serverId}/playlists:
    get:
      tags:
      - Discover data collections
      summary: collection 'playlists'
      description: |-
        Fetch playlists of the feature collection with id `serverId`.

        Every feature in a dataset belongs to a collection. A dataset may
        consist of multiple feature servers.

        Use content negotiation to request HTML or JSON.
      operationId: getServerPlaylists
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      - name: limit
        in: query
        description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        required: false
        style: form
        explode: false
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 10
      - name: offset
        in: query
        description: The optional offset parameter ...
        required: false
        style: form
        explode: false
        schema:
          minimum: 1
          type: integer
          default: 0
      - name: filter
        in: query
        description: |-
          The optional filter parameter ~~~.

          ~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      - name: orderby
        in: query
        description: |-
          The optional orderby parameter ~~~.

          ~~~~.
        required: false
        style: form
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |-
            The response is a document consisting of playlists in the collection.
            The playlists included in the response are determined by the server
            based on the query parameters of the request. To support access to
            larger servers without overloading the client, the API supports
            paged access with links to the next page, if more playlists are selected
            that the page size.

            The `limit` parameter may be used to control the subset of the
            selected playlists that should be returned in the response, the page size.
            Each page may include information about the number of selected and
            returned playlists (`numberMatched` and `numberReturned`) as well as
            links to support paging (link relation `next`).
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "400":
          description: Bad request
        "404":
          description: Not Found
        "500":
          description: Server error
      security:
      - basicAuth: []
    post:
      tags:
      - Playlist
      summary: Upload a new playlist to the server
      description: Upload a playlist.
      operationId: postServerPlaylists
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serverId_playlists_body'
      responses:
        "200":
          description: No response
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
    delete:
      tags:
      - Playlist
      summary: Delete all items from the playlist
      description: Delete all items from the playlist.
      operationId: deleteServerPlaylists
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      responses:
        "200":
          description: No response
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
  /servers/{serverId}/playlists/{playlistId}:
    get:
      tags:
      - Playlist
      summary: fetch a single playlist
      description: |-
        Fetch the output with id `outputId` in the feature collection
        with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: getServerPlaylist
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            fetch the feature with id `recorderId` in the feature collection
            with id `serverId`
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/playlist'
            text/html:
              schema:
                type: string
        "404":
          description: Not Found
        "500":
          description: Server error
      security: []
    put:
      tags:
      - Playlist
      summary: replace a single playlist
      description: |-
        Fetch the output with id `outputId` in the feature collection
        with id `serverId`.

        Use content negotiation to request HTML or JSON.
      operationId: putServerPlaylist
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: f
        in: query
        description: "Select the output format of the response. If no value is provided,\
          \ the standard HTTP rules apply, i.e., the accept header will be used to\
          \ determine the format."
        required: false
        style: form
        explode: false
        schema:
          type: string
          default: html
          enum:
          - json
          - html
      responses:
        "200":
          description: |-
            fetch the feature with id `recorderId` in the feature collection
            with id `serverId`
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
          content:
            application/json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "404":
          description: The requested URI was not found.
        "500":
          description: Server error
      security: []
    delete:
      tags:
      - Playlist
      summary: remove playlist from server
      operationId: deleteServerPlaylist
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: playlist removed
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
        "404":
          description: Not Found
        "500":
          description: Server error
    options:
      tags:
      - Playlist
      operationId: optionsServerPlaylist
      parameters:
      - name: serverId
        in: path
        description: serial number of the machine
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: XT2
      - name: playlistId
        in: path
        description: local identifier of a playlist
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/apiVersion'
      security:
      - basicAuth: []
components:
  schemas:
    htmlSchema:
      type: string
      example: <html>...</html>
    servers:
      required:
      - links
      - servers
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        servers:
          type: array
          items:
            $ref: '#/components/schemas/server'
    events:
      required:
      - links
      - servers
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    server:
      required:
      - links
      - servers
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        isConnected:
          type: boolean
        id:
          type: string
          example: XT2
        name:
          type: string
          example: XT2
        model:
          type: string
          example: XT2
        manufacturer:
          type: string
          example: EVS
        manufacturerShort:
          type: string
          example: EVS
        hardwareVersion:
          type: string
          example: "1.17"
        softwareVersion:
          type: string
          example: "8.4"
        serial:
          type: string
          example: "6543214"
        host:
          type: string
          example: 192.168.0.100
        other:
          type: string
          example: black and white chassis
        properties:
          type: object
        clipCount:
          type: integer
          example: 123
        playlistCount:
          type: integer
          example: 0
        outputCount:
          type: integer
          example: 2
        inputCount:
          type: integer
          example: 1
        upTime:
          type: integer
          example: 1
    confClasses:
      required:
      - conformsTo
      type: object
      properties:
        conformsTo:
          type: array
          items:
            type: string
    exception:
      required:
      - code
      type: object
      properties:
        code:
          type: string
        description:
          type: string
      description: "Information about the exception: an error code plus an optional\
        \ description."
    landingPage:
      required:
      - links
      type: object
      properties:
        title:
          type: string
          example: AudioVideo server
        description:
          type: string
          example: Serving the best videos in town.
        attribution:
          type: string
          example: Videos attributed to Kind Lear.
        serverCount:
          type: number
          example: 1
    link:
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: http://data.example.com/machines/123
        rel:
          type: string
          example: alternate
        type:
          type: string
          example: application/json
        title:
          type: string
          example: Name of the Audio/Video Server in a network
    input:
      type: object
      properties:
        id:
          type: string
          example: a389a212-68ca-414d-ba48-e4fd9766ad12
        name:
          type: string
          example: REC1
        number:
          type: integer
          example: 1
        state:
          type: string
    output:
      type: object
      properties:
        id:
          type: string
          example: PGM1
        name:
          type: string
          example: PGM1
        loop:
          type: boolean
        speed:
          maximum: 1000
          minimum: -1000
          type: integer
          example: 100
        state:
          type: string
          enum:
          - start
          - stop
          - pause
    codelists:
      required:
      - links
      type: object
      properties:
        codelistEntries:
          type: array
          items:
            $ref: '#/components/schemas/codelistEntry'
        description:
          type: string
        title:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    codelistEntry:
      required:
      - id
      - links
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        title:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    JsonSchema:
      type: object
    clip:
      type: object
      properties:
        id:
          type: string
          example: flbjr5y0
        name:
          type: string
          example: TGB1
        label:
          type: string
        keywords:
          type: array
          items:
            type: string
        videoFormat:
          type: string
        begin:
          type: string
          example: 00:00:00:00
        duration:
          type: string
          example: 00:01:05:00
    playlist:
      type: object
      properties:
        id:
          type: string
          example: a389a212-68ca-414d-ba48-e4fd9766ad12
        name:
          type: string
          example: REC1
        number:
          type: integer
          example: 1
    clips_clipId_body:
      type: object
      properties:
        topic:
          type: string
          example: all
        callbackUrl:
          type: string
          example: all
      description: topic to subscribe to
    serverId_playlists_body:
      type: object
      properties:
        topic:
          type: string
          example: all
        callbackUrl:
          type: string
          example: all
      description: topic to subscribe to
    serversserverIdoutputsoutputId_clip_offset:
      type: object
      properties:
        timecode:
          type: string
          example: 00:00:01:24
    serversserverIdoutputsoutputId_clip_duration:
      type: object
      properties:
        timecode:
          type: string
          example: 00:00:01:00
    serversserverIdoutputsoutputId_clip:
      type: object
      properties:
        id:
          type: string
          example: 2.HD_0001.mp4
        offset:
          $ref: '#/components/schemas/serversserverIdoutputsoutputId_clip_offset'
        duration:
          $ref: '#/components/schemas/serversserverIdoutputsoutputId_clip_duration'
    outputs_outputId_body:
      type: object
      properties:
        clip:
          $ref: '#/components/schemas/serversserverIdoutputsoutputId_clip'
        status:
          type: string
          example: start
    serverId_clips_body:
      type: object
      properties:
        filename:
          type: array
          items:
            type: string
            format: binary
  responses:
    LandingPage:
      description: |-
        The landing page provides links to the API definition
        (link relations `service-desc` and `service-doc`),
        the Conformance declaration (path `/conformance`,
        link relation `conformance`), and the Feature
        servers (path `/servers`, link relation
        `data`).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/landingPage'
          example:
            title: Buildings in Bonn
            description: Access to data about unit15 via a Web API that conforms to
              this API specification.
            links:
            - href: http://data.example.org/
              rel: self
              type: application/json
              title: this document
            - href: http://data.example.org/api
              rel: service-desc
              type: application/vnd.oai.openapi+json;version=3.0
              title: the API definition
            - href: http://data.example.org/api.html
              rel: service-doc
              type: text/html
              title: the API documentation
            - href: http://data.example.org/conformance
              rel: conformance
              type: application/json
              title: API conformance classes implemented by this server
            - href: http://data.example.org/servers
              rel: data
              type: application/json
              title: Information about the feature servers
        text/html:
          schema:
            type: string
    ConformanceDeclaration:
      description: |-
        The URIs of all conformance classes supported by the server.

        To support "generic" clients that want to access multiple
        API implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/confClasses'
          example:
            conformsTo:
            - http://www.pynch.tv/spec/api-1/1.0/conf/core
            - http://www.pynch.tv/spec/api-1/1.0/conf/oas30
            - http://www.pynch.tv/spec/api-1/1.0/conf/html
            - http://www.pynch.tv/spec/api-1/1.0/conf/json
        text/html:
          schema:
            type: string
    servers:
      description: |-
        The feature servers shared by this API.

        The dataset is organized as one or more feature servers. This resource
        provides information about and access to the servers.

        The response contains the list of servers. For each collection, a link
        to the items in the collection (path `/servers/{serverId}/items`,
        link relation `items`) as well as key information about the collection.
        This information includes:

        * A local identifier for the collection that is unique for the dataset;
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/servers'
          example:
            links:
            - href: http://data.example.org/servers.json
              rel: self
              type: application/json
              title: this document
            - href: http://data.example.org/servers.html
              rel: alternate
              type: text/html
              title: this document as HTML
            - href: http://schemas.example.org/1.0/buildings.xsd
              rel: describedBy
              type: application/xml
              title: GML application schema for Acme Corporation building data
            - href: http://download.example.org/buildings.gpkg
              rel: enclosure
              type: application/geopackage+sqlite3
              title: Bulk download (GeoPackage)
              length: 472546
            servers:
            - id: buildings
              title: Buildings
              description: Buildings in the city of Bonn.
              links:
              - href: http://data.example.org/servers/buildings/items
                rel: items
                type: application/json
                title: Buildings
              - href: http://data.example.org/servers/buildings/items.html
                rel: items
                type: text/html
                title: Buildings
              - href: https://creativecommons.org/publicdomain/zero/1.0/
                rel: license
                type: text/html
                title: CC0-1.0
              - href: https://creativecommons.org/publicdomain/zero/1.0/rdf
                rel: license
                type: application/rdf+xml
                title: CC0-1.0
        text/html:
          schema:
            type: string
    Clip:
      description: blabla
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    Playlist:
      description: blabla
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    Program:
      description: blabla
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    Recorder:
      description: blabla
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
    InvalidParameter:
      description: A query parameter has an invalid value.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
    NotFound:
      description: The requested URI was not found.
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
  parameters:
    serverId:
      name: serverId
      in: path
      description: serial number of the machine
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: XT2
    outputId:
      name: outputId
      in: path
      description: local identifier of an output
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: PGM2
    lineNr:
      name: lineNr
      in: path
      description: line number for OnScreenDisplay
      required: true
      style: simple
      explode: false
      schema:
        type: number
      example: 1
    datetime:
      name: datetime
      in: query
      description: |-
        Either a date-time or an interval, open or closed. Date and time expressions
        adhere to RFC 3339. Open intervals are expressed using double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only elements that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      required: false
      style: form
      explode: false
      schema:
        type: string
    clipId:
      name: clipId
      in: path
      description: local identifier of a clip
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 000117A
    playlistId:
      name: playlistId
      in: path
      description: local identifier of a playlist
      required: true
      style: simple
      explode: false
      schema:
        type: string
    inputId:
      name: inputId
      in: path
      description: local identifier of an input
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: REC1
    filter:
      name: filter
      in: query
      description: |-
        The optional filter parameter ~~~.

        ~~~.
      required: false
      style: form
      explode: false
      schema:
        type: string
    orderby:
      name: orderby
      in: query
      description: |-
        The optional orderby parameter ~~~.

        ~~~~.
      required: false
      style: form
      explode: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |-
        The optional limit parameter limits the number of items that are presented in the response document.

        Only items are counted that are on the first level of the collection in the response document.
        Nested objects contained within the explicitly requested items shall not be counted.

        Minimum = 1. Maximum = 10000. Default = 10.
      required: false
      style: form
      explode: false
      schema:
        maximum: 10000
        minimum: 1
        type: integer
        default: 10
    offset:
      name: offset
      in: query
      description: The optional offset parameter ...
      required: false
      style: form
      explode: false
      schema:
        minimum: 1
        type: integer
        default: 0
    fCommon:
      name: f
      in: query
      description: "Select the output format of the response. If no value is provided,\
        \ the standard HTTP rules apply, i.e., the accept header will be used to determine\
        \ the format."
      required: false
      style: form
      explode: false
      schema:
        type: string
        default: html
        enum:
        - json
        - html
  headers:
    apiVersion:
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: version
        example: 1.0.2
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
    apiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
    openID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    oAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
